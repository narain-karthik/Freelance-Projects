import requests
import hashlib
import time
import json
import os
from typing import Dict, Optional, List
import logging
from datetime import datetime
from dataclasses import dataclass
from tabulate import tabulate
from magic import Magic  # For Windows compatibility
import stat
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='malware_detector.log'
)


@dataclass
class ScanConfig:
    """Configuration for scan services"""
    virustotal_api_key: str = "786cb75dfd29b00ba1adea08557ac4e50d921b335b3837f0b5c0078738e65125"
    hybrid_analysis_api_key: str = "6hk3xett4a219dd9ajrdpsaaa607332dgsrkt0p23278a103qnyt6nqu765f99d2"
    polyswarm_api_key: str = "adb911d69e4a67fa7ed3c9177307336c"
    alienvault_api_key: str = "d93748b6a9e7b39304a37c9389c44c45fdb6a07ec75bfb4b9a04c43f41ecc9f6"


class MalwareDetector:
    def __init__(self, config: ScanConfig = ScanConfig()):
        self.config = config
        self.base_urls = {
            "virustotal": "https://www.virustotal.com/api/v3",
            "hybrid_analysis": "https://www.hybrid-analysis.com/api/v2",
            "polyswarm": "https://api.polyswarm.network/v3",
            "alienvault": "https://otx.alienvault.com/api/v1"
        }
        self.headers = {
            "virustotal": {"x-apikey": config.virustotal_api_key},
            "hybrid_analysis": {"api-key": config.hybrid_analysis_api_key, "User-Agent": "MalwareDetector"},
            "polyswarm": {"Authorization": config.polyswarm_api_key},
            "alienvault": {"X-OTX-API-KEY": config.alienvault_api_key}
        }
        self.available_tools = ["virustotal", "hybrid_analysis", "polyswarm", "alienvault"]

    def _calculate_hash(self, file_path: str) -> Dict:
        """Calculate multiple hashes of the file."""
        try:
            md5_hash = hashlib.md5()
            sha1_hash = hashlib.sha1()
            sha256_hash = hashlib.sha256()
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    md5_hash.update(chunk)
                    sha1_hash.update(chunk)
                    sha256_hash.update(chunk)
            return {
                "md5": md5_hash.hexdigest(),
                "sha1": sha1_hash.hexdigest(),
                "sha256": sha256_hash.hexdigest()
            }
        except (IOError, OSError) as e:
            logging.error(f"Hash calculation failed: {str(e)}")
            raise

    def _get_file_metadata(self, file_path: str) -> Dict:
        """Gather detailed file metadata."""
        stats = os.stat(file_path)
        mime = Magic(mime=True)
        return {
            "name": os.path.basename(file_path),
            "full_path": os.path.abspath(file_path),
            "size": stats.st_size,
            "creation_time": datetime.fromtimestamp(stats.st_ctime).strftime("%Y-%m-%d %H:%M:%S"),
            "modification_time": datetime.fromtimestamp(stats.st_mtime).strftime("%Y-%m-%d %H:%M:%S"),
            "access_time": datetime.fromtimestamp(stats.st_atime).strftime("%Y-%m-%d %H:%M:%S"),
            "permissions": oct(stats.st_mode & 0o777)[-3:],
            "mime_type": mime.from_file(file_path),
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

    def _make_request(self, url: str, method: str = "get", headers: Dict = None,
                      files: Dict = None, data: Dict = None, timeout: int = 30) -> Dict:
        """Generic request handler with error management."""
        try:
            start_time = time.time()
            response = getattr(requests, method)(
                url, headers=headers, files=files, data=data, timeout=timeout
            )
            response.raise_for_status()
            return {
                "data": response.json(),
                "response_time": round(time.time() - start_time, 2)
            }
        except requests.RequestException as e:
            logging.error(f"Request failed: {str(e)}")
            return {"error": str(e), "response_time": 0}

    def virustotal_scan(self, file_path: str) -> Dict:
        """Scan file with VirusTotal."""
        try:
            with open(file_path, "rb") as f:
                files = {"file": (os.path.basename(file_path), f)}
                upload_result = self._make_request(
                    f"{self.base_urls['virustotal']}/files",
                    "post", self.headers["virustotal"], files=files
                )
                if "error" in upload_result:
                    return upload_result
                analysis_id = upload_result["data"]["data"]["id"]

            for _ in range(10):
                result = self._make_request(
                    f"{self.base_urls['virustotal']}/analyses/{analysis_id}",
                    headers=self.headers["virustotal"]
                )
                if result.get("data", {}).get("data", {}).get("attributes", {}).get("status") == "completed":
                    file_hash = self._calculate_hash(file_path)["sha256"]
                    return self._make_request(
                        f"{self.base_urls['virustotal']}/files/{file_hash}",
                        headers=self.headers["virustotal"]
                    )
                time.sleep(12)
            return {"error": "Analysis timeout", "response_time": 0}
        except Exception as e:
            return {"error": f"VirusTotal scan failed: {str(e)}", "response_time": 0}

    def hybrid_analysis_scan(self, file_path: str) -> Dict:
        """Scan file with Hybrid Analysis."""
        try:
            with open(file_path, "rb") as f:
                files = {"file": (os.path.basename(file_path), f)}
                data = {"environment_id": "100"}  # Windows 7 32-bit
                submit_result = self._make_request(
                    f"{self.base_urls['hybrid_analysis']}/submit/file",
                    "post", self.headers["hybrid_analysis"], files=files, data=data
                )
                if "error" in submit_result:
                    return submit_result
                job_id = submit_result["data"]["job_id"]

            for _ in range(10):
                result = self._make_request(
                    f"{self.base_urls['hybrid_analysis']}/report/{job_id}/summary",
                    headers=self.headers["hybrid_analysis"]
                )
                if result.get("data", {}).get("state") in ["SUCCESS", "ERROR"]:
                    return result
                time.sleep(12)
            return {"error": "Analysis timeout", "response_time": 0}
        except Exception as e:
            return {"error": f"Hybrid Analysis failed: {str(e)}", "response_time": 0}

    def polyswarm_scan(self, file_path: str) -> Dict:
        """Scan file with PolySwarm."""
        try:
            with open(file_path, "rb") as f:
                files = {"file": (os.path.basename(file_path), f)}
                result = self._make_request(
                    f"{self.base_urls['polyswarm']}/consumer/scan/direct",
                    "post", self.headers["polyswarm"], files=files
                )
                if result.get("data", {}).get("status") == "OK":
                    return {"data": result["data"]["result"], "response_time": result["response_time"]}
                return {"error": "Scan incomplete", "response_time": result["response_time"]}
        except Exception as e:
            return {"error": f"PolySwarm failed: {str(e)}", "response_time": 0}

    def alienvault_lookup(self, file_hash: str) -> Dict:
        """Lookup hash in AlienVault OTX."""
        return self._make_request(
            f"{self.base_urls['alienvault']}/indicators/file/{file_hash}",
            headers=self.headers["alienvault"]
        )

    def analyze_file(self, file_path: str, selected_tools: List[str]) -> Dict:
        """Perform malware analysis with selected tools."""
        hashes = self._calculate_hash(file_path)
        results = {
            "file_info": self._get_file_metadata(file_path),
            "hashes": hashes,
            "scan_results": {},
            "analysis_metrics": {"total_time": 0}
        }

        logging.info(f"Starting analysis for {file_path} with tools: {selected_tools}")
        for tool in selected_tools:
            if tool == "alienvault":
                results["scan_results"]["alienvault"] = self.alienvault_lookup(hashes["sha256"])
                results["analysis_metrics"]["total_time"] += results["scan_results"]["alienvault"]["response_time"]
            else:
                results["scan_results"][tool] = getattr(self, f"{tool}_scan")(file_path)
                results["analysis_metrics"]["total_time"] += results["scan_results"][tool]["response_time"]

        results["verdict"] = self._calculate_verdict(results["scan_results"])
        results["behavioral_hints"] = self._analyze_behavior(results["scan_results"])

        results["analysis_metrics"]["total_time"] = round(results["analysis_metrics"]["total_time"], 2)
        logging.info(f"Analysis completed for {file_path}")
        return results

    def _calculate_verdict(self, scans: Dict) -> Dict:
        """Calculate overall verdict with detailed breakdown."""
        detections = 0
        total = 0
        service_breakdown = {}
        for tool in scans:
            if tool == "virustotal":
                vt_stats = scans["virustotal"].get("data", {}).get("data", {}).get("attributes", {}).get(
                    "last_analysis_stats", {})
                vt_malicious = vt_stats.get("malicious", 0) + vt_stats.get("suspicious", 0)
                vt_total = sum(vt_stats.values())
                detections += vt_malicious
                total += vt_total
                service_breakdown["virustotal"] = {"detections": vt_malicious, "total": vt_total}
            elif tool == "hybrid_analysis":
                ha_verdict = scans["hybrid_analysis"].get("data", {}).get("verdict", "")
                if ha_verdict in ["malicious", "suspicious"]:
                    detections += 1
                    total += 1
                    service_breakdown["hybrid_analysis"] = {"detections": 1, "total": 1}
                elif ha_verdict:
                    total += 1
                    service_breakdown["hybrid_analysis"] = {"detections": 0, "total": 1}
            elif tool == "polyswarm":
                ps_assertions = scans["polyswarm"].get("data", {}).get("assertions", [])
                ps_detections = sum(1 for a in ps_assertions if a.get("verdict"))
                ps_total = len(ps_assertions)
                detections += ps_detections
                total += ps_total
                service_breakdown["polyswarm"] = {"detections": ps_detections, "total": ps_total}
            elif tool == "alienvault":
                av_pulses = scans["alienvault"].get("data", {}).get("pulse_info", {}).get("count", 0)
                if av_pulses > 0:
                    detections += 1
                    total += 1
                    service_breakdown["alienvault"] = {"detections": 1, "total": 1}
                elif "pulse_info" in scans["alienvault"].get("data", {}):
                    total += 1
                    service_breakdown["alienvault"] = {"detections": 0, "total": 1}

        confidence = (detections / total * 100) if total > 0 else 0
        return {
            "is_malicious": detections > 0,
            "confidence": round(confidence, 2),
            "detections": detections,
            "total_scans": total,
            "service_breakdown": service_breakdown
        }

    def _analyze_behavior(self, scans: Dict) -> Dict:
        """Infer potential behaviors based on scan results."""
        behaviors = set()
        if "virustotal" in scans and scans["virustotal"].get("data", {}).get("data", {}).get("attributes", {}).get(
                "type_description") in ["Win32 EXE", "PE32"]:
            behaviors.add("Executable")
        if "hybrid_analysis" in scans and scans["hybrid_analysis"].get("data", {}).get("network_calls"):
            behaviors.add("Network Activity")
        if "hybrid_analysis" in scans and scans["hybrid_analysis"].get("data", {}).get("dropped_files"):
            behaviors.add("File Dropping")
        if "hybrid_analysis" in scans and "registry" in str(scans["hybrid_analysis"].get("data", {})).lower():
            behaviors.add("Registry Modification")
        return {
            "suspected_behaviors": list(behaviors) if behaviors else ["None detected"],
            "confidence": "Low" if not behaviors else "Medium"
        }


def display_results(results: Dict) -> None:
    """Display analysis results on the screen."""
    print("\n" + "=" * 60)
    print("MALWARE ANALYSIS REPORT - ENHANCED")
    print("=" * 60)

    # File Info
    file_info = results["file_info"]
    print("\nFile Information:")
    print(tabulate([
        ["Name", file_info["name"]],
        ["Full Path", file_info["full_path"]],
        ["MD5", results["hashes"]["md5"]],
        ["SHA1", results["hashes"]["sha1"]],
        ["SHA256", results["hashes"]["sha256"]],
        ["Size", f"{file_info['size']} bytes"],
        ["MIME Type", file_info["mime_type"]],
        ["Permissions", file_info["permissions"]],
        ["Created", file_info["creation_time"]],
        ["Modified", file_info["modification_time"]],
        ["Accessed", file_info["access_time"]],
        ["Analysis Date", file_info["timestamp"]]
    ], tablefmt="grid"))

    # Scan Results Summary
    print("\nScan Results Summary:")
    scan_data = []
    for service, result in results["scan_results"].items():
        status = "Error" if "error" in result else (
            "Malicious" if any(x in str(result).lower() for x in ["malicious", "suspicious"]) else "Clean"
        )
        response_time = f"{result['response_time']}s"
        scan_data.append([service.capitalize(), status, response_time])
    print(tabulate(scan_data, headers=["Service", "Status", "Response Time"], tablefmt="grid"))

    # Verdict
    verdict = results["verdict"]
    print(f"\nFinal Verdict: {'MALICIOUS' if verdict['is_malicious'] else 'CLEAN'}")
    print(f"Confidence: {verdict['confidence']}%")
    print(f"Detections: {verdict['detections']}/{verdict['total_scans']}")
    print("\nService Detection Breakdown:")
    breakdown_data = [[s.capitalize(), f"{d['detections']}/{d['total']}"]
                      for s, d in verdict["service_breakdown"].items()]
    print(tabulate(breakdown_data, headers=["Service", "Detections"], tablefmt="grid"))

    # Behavioral Hints
    print("\nBehavioral Analysis:")
    print(tabulate([
        ["Suspected Behaviors", ", ".join(results["behavioral_hints"]["suspected_behaviors"])],
        ["Confidence", results["behavioral_hints"]["confidence"]]
    ], tablefmt="grid"))

    # Analysis Metrics
    print(f"\nTotal Analysis Time: {results['analysis_metrics']['total_time']} seconds")


def generate_pdf_report(results: Dict, output_file: str) -> None:
    """Generate a PDF report from the analysis results."""
    doc = SimpleDocTemplate(output_file, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph("Malware Analysis Report - Enhanced", styles['Title']))
    story.append(Spacer(1, 12))

    story.append(Paragraph("File Information", styles['Heading2']))
    file_info = results["file_info"]
    file_data = [
        ["Name", file_info["name"]],
        ["Full Path", file_info["full_path"]],
        ["MD5", results["hashes"]["md5"]],
        ["SHA1", results["hashes"]["sha1"]],
        ["SHA256", results["hashes"]["sha256"]],
        ["Size", f"{file_info['size']} bytes"],
        ["MIME Type", file_info["mime_type"]],
        ["Permissions", file_info["permissions"]],
        ["Created", file_info["creation_time"]],
        ["Modified", file_info["modification_time"]],
        ["Accessed", file_info["access_time"]],
        ["Analysis Date", file_info["timestamp"]]
    ]
    file_table = Table(file_data, colWidths=[150, 350])
    file_table.setStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
    ])
    story.append(file_table)
    story.append(Spacer(1, 12))

    story.append(Paragraph("Scan Results Summary", styles['Heading2']))
    scan_data = [["Service", "Status", "Response Time"]]
    for service, result in results["scan_results"].items():
        status = "Error" if "error" in result else (
            "Malicious" if any(x in str(result).lower() for x in ["malicious", "suspicious"]) else "Clean"
        )
        scan_data.append([service.capitalize(), status, f"{result['response_time']}s"])
    scan_table = Table(scan_data, colWidths=[150, 150, 150])
    scan_table.setStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
    ])
    story.append(scan_table)
    story.append(Spacer(1, 12))

    story.append(Paragraph("Final Verdict", styles['Heading2']))
    verdict = results["verdict"]
    verdict_text = f"Verdict: {'MALICIOUS' if verdict['is_malicious'] else 'CLEAN'}<br/>Confidence: {verdict['confidence']}%<br/>Detections: {verdict['detections']}/{verdict['total_scans']}"
    story.append(Paragraph(verdict_text, styles['Normal']))
    story.append(Spacer(1, 12))

    story.append(Paragraph("Service Detection Breakdown", styles['Heading2']))
    breakdown_data = [["Service", "Detections"]]
    for s, d in verdict["service_breakdown"].items():
        breakdown_data.append([s.capitalize(), f"{d['detections']}/{d['total']}"])
    breakdown_table = Table(breakdown_data, colWidths=[150, 150])
    breakdown_table.setStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
    ])
    story.append(breakdown_table)
    story.append(Spacer(1, 12))

    story.append(Paragraph("Behavioral Analysis", styles['Heading2']))
    behavior_data = [
        ["Suspected Behaviors", ", ".join(results["behavioral_hints"]["suspected_behaviors"])],
        ["Confidence", results["behavioral_hints"]["confidence"]]
    ]
    behavior_table = Table(behavior_data, colWidths=[150, 350])
    behavior_table.setStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
    ])
    story.append(behavior_table)
    story.append(Spacer(1, 12))

    story.append(
        Paragraph(f"Total Analysis Time: {results['analysis_metrics']['total_time']} seconds", styles['Normal']))

    doc.build(story)


def get_user_tool_selection(available_tools: List[str]) -> List[str]:
    """Prompt user to select analysis tools."""
    print("\nAvailable analysis tools:")
    for i, tool in enumerate(available_tools, 1):
        print(f"{i}. {tool.capitalize()}")

    while True:
        selection = input(
            "\nEnter the numbers of the tools you want to use (e.g., '1 2 3' for multiple, 'all' for all): ").strip().lower()
        if selection == "all":
            return available_tools

        try:
            selected_nums = [int(num) for num in selection.split()]
            if not selected_nums or max(selected_nums) > len(available_tools) or min(selected_nums) < 1:
                raise ValueError
            return [available_tools[num - 1] for num in selected_nums]
        except ValueError:
            print("Invalid input. Please enter valid numbers separated by spaces or 'all'.")


def main():
    detector = MalwareDetector()
    print("Enhanced Malware Detection Tool - Powered by xAI")
    print("=================================================")

    while True:
        file_path = input("\nEnter file path to scan (or 'quit' to exit): ").strip()
        if file_path.lower() == 'quit':
            print("Exiting tool...")
            break

        if not os.path.exists(file_path):
            print(f"Error: File '{file_path}' not found")
            continue

        selected_tools = get_user_tool_selection(detector.available_tools)
        print(f"Selected tools: {', '.join(tool.capitalize() for tool in selected_tools)}")

        try:
            results = detector.analyze_file(file_path, selected_tools)

            # Display results on screen
            display_results(results)

            # Generate PDF report
            output_file = f"scan_report_{results['hashes']['sha256'][:8]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            generate_pdf_report(results, output_file)
            print(f"\nReport saved as PDF: {output_file}")

            # Save JSON file
            json_file = f"scan_result_{results['hashes']['sha256'][:8]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(json_file, "w") as f:
                json.dump(results, f, indent=2)
            print(f"Detailed results saved to: {json_file}")

        except Exception as e:
            logging.error(f"Analysis failed: {str(e)}")
            print(f"Error: {str(e)}")


if __name__ == "__main__":
    main()