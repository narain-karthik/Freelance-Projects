# test_malware.py
# This is a benign test file designed to trigger malware detection analysis
# It contains suspicious patterns but does no actual harm

import os
import time
import base64
import sys

# Simulated suspicious strings (encoded to look malicious but harmless)
SUSPICIOUS_DLL = base64.b64encode(b"kernel32.dll").decode()
SUSPICIOUS_CMD = base64.b64encode(b"cmd.exe /c dir").decode()


def simulate_registry_access():
    # Simulate registry-like operations (no actual changes)
    print("[TEST] Simulating registry key check...")
    time.sleep(1)
    return "HKLM\\Software\\TestKey"


def simulate_file_operations():
    # Create a harmless temporary file
    try:
        with open("test_file.txt", "w") as f:
            f.write("This is a test file created at " + time.ctime())
        print("[TEST] Created test file")
    except Exception as e:
        print(f"[TEST] File operation simulation failed: {e}")


def simulate_network_activity():
    # Simulate network-like behavior without actual connections
    print("[TEST] Simulating network beacon...")
    encoded = base64.b64encode(b"Simulated C2 communication").decode()
    time.sleep(2)
    print(f"[TEST] Encoded test message: {encoded}")


def main():
    print("Starting benign test malware simulation...")
    print(f"PID: {os.getpid()}")

    # Execute simulated suspicious behaviors
    simulate_registry_access()
    simulate_file_operations()
    simulate_network_activity()

    # Self-replication simulation (just copies itself with a different name)
    try:
        with open(__file__, "r") as src:
            with open("test_copy.py", "w") as dst:
                dst.write(src.read())
        print("[TEST] Created copy of self")
    except Exception as e:
        print(f"[TEST] Self-replication simulation failed: {e}")

    print("Test simulation complete. This is not real malware!")


if __name__ == "__main__":
    main()